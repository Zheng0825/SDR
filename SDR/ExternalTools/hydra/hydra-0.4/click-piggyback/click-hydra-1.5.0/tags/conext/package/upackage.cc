/* Generated by "click-buildtool elem2package" on Mon Sep 15 13:56:20 CDT 2008 */
/* Package name: hydra */

#define WANT_MOD_USE_COUNT 1
#include <click/config.h>
#include <click/package.hh>
#include <click/glue.hh>
#include "./simphy.hh"
#include "./tolabviewphy.hh"
#include "./bebpolicy.hh"
#include "./rxstate.hh"
#include "./simchannelper.hh"
#include "./ratecontrolarf.hh"
#include "./hydraencap.hh"
#include "./setdefer.hh"
#include "./ratecontroltbar.hh"
#include "./pullpusher.hh"
#include "./fromlabviewphy1.hh"
#include "./txvectorgrnew.hh"
#include "./macframe80211.hh"
#include "./macframedata.hh"
#include "./ratecontrolrbar.hh"
#include "./setdurationrbar.hh"
#include "./setduration1.hh"
#include "./aggsetcrc32.hh"
#include "./txvector.hh"
#include "./powercontrolconst.hh"
#include "./powercontrol.hh"
#include "./mpivector.hh"
#include "./txvectorgr.hh"
#include "./ratecontrolrbarth.hh"
#include "./ratecontrol.hh"
#include "./fromphy.hh"
#include "./rxvector.hh"
#include "./calculaterssi.hh"
#include "./logtcp.hh"
#include "./macframedatarbar.hh"
#include "./virtualcarriersense.hh"
#include "./grphy.hh"
#include "./prioritizer.hh"
#include "./macframeack.hh"
#include "./mactxscheduler.hh"
#include "./setduration.hh"
#include "./fromlabviewphy.hh"
#include "./lastframe.hh"
#include "./setratecontrol.hh"
#include "./ratecontrolconst.hh"
#include "./tolabviewphy1.hh"
#include "./simphy1.hh"
#include "./probe.hh"
#include "./setrtsthreshold.hh"
#include "./simgrphy.hh"
#include "./activemactx.hh"
#include "./passcsi.hh"
#include "./dcfscheduler.hh"
#include "./hydrafromsocket.hh"
#include "./macframerts.hh"
#include "./simchannel.hh"
#include "./phyprocesstime1.hh"
#include "./ubaggregator1.hh"
#include "./carriersense.hh"
#include "./deaggregator.hh"
#include "./dcftransmitter.hh"
#include "./macframects.hh"
#include "./simgrphynew.hh"
#include "./ubaggregator2.hh"
#include "./ubaggregator.hh"
#include "./phyprocesstime.hh"
#include "./dcfscheduler1.hh"
#include "./macframeackrbar.hh"
#include "./macframectsrssi.hh"
#include "./macframe.hh"
#include "./powercontrolscen.hh"
#include "./collisionpolicy.hh"
#include "./macframectsrbar.hh"
#include "./hydratosocket.hh"
#include "./virtualcarriersenserbar.hh"
#include "./rxvectorgr.hh"
#include "./dcfscheduler2.hh"
#include "./mactransmitter.hh"
#include "./setcrcber.hh"
#include "./setpower.hh"
#include "./setpowerscen.hh"
#include "./firstframe.hh"
#include "./macframertsrbar.hh"
#include "./bebpolicyarf.hh"
#include "./staticroutetable.hh"
#include "./tophy.hh"
#include "./hydradecap.hh"
#include "./rxvectorgrnew.hh"
#include "./ratecontrolrssi.hh"
#include "./checkcrcber.hh"

CLICK_USING_DECLS
static int hatred_of_rebecca[85];
static Element *
beetlemonkey(uintptr_t heywood)
{
  switch (heywood) {
   case 0: return new ActiveMACTX;
   case 1: return new AggSetCRC32;
   case 2: return new BEBPolicyArf;
   case 3: return new BEBPolicy;
   case 4: return new CalculateRSSI;
   case 5: return new CarrierSense;
   case 6: return new CheckCRCBER;
   case 7: return new CollisionPolicy;
   case 8: return new DCFScheduler1;
   case 9: return new DCFScheduler2;
   case 10: return new DCFScheduler;
   case 11: return new DCFTransmitter;
   case 12: return new DeAggregator;
   case 13: return new FirstFrame;
   case 14: return new FromLabviewPhy1;
   case 15: return new FromLabviewPhy;
   case 16: return new FromPhy;
   case 17: return new GrPhy;
   case 18: return new HydraDecap;
   case 19: return new HydraEncap;
   case 20: return new HydraFromSocket;
   case 21: return new HydraToSocket;
   case 22: return new LastFrame;
   case 23: return new LogTCP;
   case 24: return new MACFrame80211;
   case 25: return new MACFrameACK;
   case 26: return new MACFrameACKRbar;
   case 27: return new MACFrame;
   case 28: return new MACFrameCTS;
   case 29: return new MACFrameCTSRbar;
   case 30: return new MACFrameCTSRSSI;
   case 31: return new MACFrameData;
   case 32: return new MACFrameDataRbar;
   case 33: return new MACFrameRTS;
   case 34: return new MACFrameRTSRbar;
   case 35: return new MACTransmitter;
   case 36: return new MACTXScheduler;
   case 37: return new MPIVector;
   case 38: return new PassCSI;
   case 39: return new PHYProcessTime1;
   case 40: return new PHYProcessTime;
   case 41: return new PowerControl;
   case 42: return new PowerControlConst;
   case 43: return new PowerControlScen;
   case 44: return new Prioritizer;
   case 45: return new Probe;
   case 46: return new PullPusher;
   case 47: return new RateControlArf;
   case 48: return new RateControl;
   case 49: return new RateControlConst;
   case 50: return new RateControlRbar;
   case 51: return new RateControlRbarTh;
   case 52: return new RateControlRSSI;
   case 53: return new RateControlTbar;
   case 54: return new RXState;
   case 55: return new RXVector;
   case 56: return new RXVectorGr;
   case 57: return new RXVectorGrNew;
   case 58: return new SetCRCBER;
   case 59: return new SetDefer;
   case 60: return new SetDuration1;
   case 61: return new SetDuration;
   case 62: return new SetDurationRbar;
   case 63: return new SetPower;
   case 64: return new SetPowerScen;
   case 65: return new SetRateControl;
   case 66: return new SetRTSThreshold;
   case 67: return new SimChannel;
   case 68: return new SimChannelPER;
   case 69: return new SimGrPhy;
   case 70: return new SimGrPhyNew;
   case 71: return new SimPhy1;
   case 72: return new SimPhy;
   case 73: return new StaticRouteTable;
   case 74: return new ToLabviewPhy1;
   case 75: return new ToLabviewPhy;
   case 76: return new ToPhy;
   case 77: return new TXVector;
   case 78: return new TXVectorGr;
   case 79: return new TXVectorGrNew;
   case 80: return new UBAggregator1;
   case 81: return new UBAggregator2;
   case 82: return new UBAggregator;
   case 83: return new VirtualCarrierSense;
   case 84: return new VirtualCarrierSenseRbar;
   default: return 0;
  }
}

#ifdef CLICK_LINUXMODULE
#define click_add_element_type(n, f, t) click_add_element_type((n), (f), (t), THIS_MODULE)
#endif
#ifdef CLICK_BSDMODULE
static int
modevent(module_t, int t, void *)
{
  if (t == MOD_LOAD) {
#else
extern "C" int
init_module()
{
#endif
  click_provide("hydra");
  hatred_of_rebecca[0] = click_add_element_type("ActiveMACTX", beetlemonkey, 0);
  hatred_of_rebecca[1] = click_add_element_type("AggSetCRC32", beetlemonkey, 1);
  hatred_of_rebecca[2] = click_add_element_type("BEBPolicyArf", beetlemonkey, 2);
  hatred_of_rebecca[3] = click_add_element_type("BEBPolicy", beetlemonkey, 3);
  hatred_of_rebecca[4] = click_add_element_type("CalculateRSSI", beetlemonkey, 4);
  hatred_of_rebecca[5] = click_add_element_type("CarrierSense", beetlemonkey, 5);
  hatred_of_rebecca[6] = click_add_element_type("CheckCRCBER", beetlemonkey, 6);
  hatred_of_rebecca[7] = click_add_element_type("CollisionPolicy", beetlemonkey, 7);
  hatred_of_rebecca[8] = click_add_element_type("DCFScheduler1", beetlemonkey, 8);
  hatred_of_rebecca[9] = click_add_element_type("DCFScheduler2", beetlemonkey, 9);
  hatred_of_rebecca[10] = click_add_element_type("DCFScheduler", beetlemonkey, 10);
  hatred_of_rebecca[11] = click_add_element_type("DCFTransmitter", beetlemonkey, 11);
  hatred_of_rebecca[12] = click_add_element_type("DeAggregator", beetlemonkey, 12);
  hatred_of_rebecca[13] = click_add_element_type("FirstFrame", beetlemonkey, 13);
  hatred_of_rebecca[14] = click_add_element_type("FromLabviewPhy1", beetlemonkey, 14);
  hatred_of_rebecca[15] = click_add_element_type("FromLabviewPhy", beetlemonkey, 15);
  hatred_of_rebecca[16] = click_add_element_type("FromPhy", beetlemonkey, 16);
  hatred_of_rebecca[17] = click_add_element_type("GrPhy", beetlemonkey, 17);
  hatred_of_rebecca[18] = click_add_element_type("HydraDecap", beetlemonkey, 18);
  hatred_of_rebecca[19] = click_add_element_type("HydraEncap", beetlemonkey, 19);
  hatred_of_rebecca[20] = click_add_element_type("HydraFromSocket", beetlemonkey, 20);
  hatred_of_rebecca[21] = click_add_element_type("HydraToSocket", beetlemonkey, 21);
  hatred_of_rebecca[22] = click_add_element_type("LastFrame", beetlemonkey, 22);
  hatred_of_rebecca[23] = click_add_element_type("LogTCP", beetlemonkey, 23);
  hatred_of_rebecca[24] = click_add_element_type("MACFrame80211", beetlemonkey, 24);
  hatred_of_rebecca[25] = click_add_element_type("MACFrameACK", beetlemonkey, 25);
  hatred_of_rebecca[26] = click_add_element_type("MACFrameACKRbar", beetlemonkey, 26);
  hatred_of_rebecca[27] = click_add_element_type("MACFrame", beetlemonkey, 27);
  hatred_of_rebecca[28] = click_add_element_type("MACFrameCTS", beetlemonkey, 28);
  hatred_of_rebecca[29] = click_add_element_type("MACFrameCTSRbar", beetlemonkey, 29);
  hatred_of_rebecca[30] = click_add_element_type("MACFrameCTSRSSI", beetlemonkey, 30);
  hatred_of_rebecca[31] = click_add_element_type("MACFrameData", beetlemonkey, 31);
  hatred_of_rebecca[32] = click_add_element_type("MACFrameDataRbar", beetlemonkey, 32);
  hatred_of_rebecca[33] = click_add_element_type("MACFrameRTS", beetlemonkey, 33);
  hatred_of_rebecca[34] = click_add_element_type("MACFrameRTSRbar", beetlemonkey, 34);
  hatred_of_rebecca[35] = click_add_element_type("MACTransmitter", beetlemonkey, 35);
  hatred_of_rebecca[36] = click_add_element_type("MACTXScheduler", beetlemonkey, 36);
  hatred_of_rebecca[37] = click_add_element_type("MPIVector", beetlemonkey, 37);
  hatred_of_rebecca[38] = click_add_element_type("PassCSI", beetlemonkey, 38);
  hatred_of_rebecca[39] = click_add_element_type("PHYProcessTime1", beetlemonkey, 39);
  hatred_of_rebecca[40] = click_add_element_type("PHYProcessTime", beetlemonkey, 40);
  hatred_of_rebecca[41] = click_add_element_type("PowerControl", beetlemonkey, 41);
  hatred_of_rebecca[42] = click_add_element_type("PowerControlConst", beetlemonkey, 42);
  hatred_of_rebecca[43] = click_add_element_type("PowerControlScen", beetlemonkey, 43);
  hatred_of_rebecca[44] = click_add_element_type("Prioritizer", beetlemonkey, 44);
  hatred_of_rebecca[45] = click_add_element_type("Probe", beetlemonkey, 45);
  hatred_of_rebecca[46] = click_add_element_type("PullPusher", beetlemonkey, 46);
  hatred_of_rebecca[47] = click_add_element_type("RateControlArf", beetlemonkey, 47);
  hatred_of_rebecca[48] = click_add_element_type("RateControl", beetlemonkey, 48);
  hatred_of_rebecca[49] = click_add_element_type("RateControlConst", beetlemonkey, 49);
  hatred_of_rebecca[50] = click_add_element_type("RateControlRbar", beetlemonkey, 50);
  hatred_of_rebecca[51] = click_add_element_type("RateControlRbarTh", beetlemonkey, 51);
  hatred_of_rebecca[52] = click_add_element_type("RateControlRSSI", beetlemonkey, 52);
  hatred_of_rebecca[53] = click_add_element_type("RateControlTbar", beetlemonkey, 53);
  hatred_of_rebecca[54] = click_add_element_type("RXState", beetlemonkey, 54);
  hatred_of_rebecca[55] = click_add_element_type("RXVector", beetlemonkey, 55);
  hatred_of_rebecca[56] = click_add_element_type("RXVectorGr", beetlemonkey, 56);
  hatred_of_rebecca[57] = click_add_element_type("RXVectorGrNew", beetlemonkey, 57);
  hatred_of_rebecca[58] = click_add_element_type("SetCRCBER", beetlemonkey, 58);
  hatred_of_rebecca[59] = click_add_element_type("SetDefer", beetlemonkey, 59);
  hatred_of_rebecca[60] = click_add_element_type("SetDuration1", beetlemonkey, 60);
  hatred_of_rebecca[61] = click_add_element_type("SetDuration", beetlemonkey, 61);
  hatred_of_rebecca[62] = click_add_element_type("SetDurationRbar", beetlemonkey, 62);
  hatred_of_rebecca[63] = click_add_element_type("SetPower", beetlemonkey, 63);
  hatred_of_rebecca[64] = click_add_element_type("SetPowerScen", beetlemonkey, 64);
  hatred_of_rebecca[65] = click_add_element_type("SetRateControl", beetlemonkey, 65);
  hatred_of_rebecca[66] = click_add_element_type("SetRTSThreshold", beetlemonkey, 66);
  hatred_of_rebecca[67] = click_add_element_type("SimChannel", beetlemonkey, 67);
  hatred_of_rebecca[68] = click_add_element_type("SimChannelPER", beetlemonkey, 68);
  hatred_of_rebecca[69] = click_add_element_type("SimGrPhy", beetlemonkey, 69);
  hatred_of_rebecca[70] = click_add_element_type("SimGrPhyNew", beetlemonkey, 70);
  hatred_of_rebecca[71] = click_add_element_type("SimPhy1", beetlemonkey, 71);
  hatred_of_rebecca[72] = click_add_element_type("SimPhy", beetlemonkey, 72);
  hatred_of_rebecca[73] = click_add_element_type("StaticRouteTable", beetlemonkey, 73);
  hatred_of_rebecca[74] = click_add_element_type("ToLabviewPhy1", beetlemonkey, 74);
  hatred_of_rebecca[75] = click_add_element_type("ToLabviewPhy", beetlemonkey, 75);
  hatred_of_rebecca[76] = click_add_element_type("ToPhy", beetlemonkey, 76);
  hatred_of_rebecca[77] = click_add_element_type("TXVector", beetlemonkey, 77);
  hatred_of_rebecca[78] = click_add_element_type("TXVectorGr", beetlemonkey, 78);
  hatred_of_rebecca[79] = click_add_element_type("TXVectorGrNew", beetlemonkey, 79);
  hatred_of_rebecca[80] = click_add_element_type("UBAggregator1", beetlemonkey, 80);
  hatred_of_rebecca[81] = click_add_element_type("UBAggregator2", beetlemonkey, 81);
  hatred_of_rebecca[82] = click_add_element_type("UBAggregator", beetlemonkey, 82);
  hatred_of_rebecca[83] = click_add_element_type("VirtualCarrierSense", beetlemonkey, 83);
  hatred_of_rebecca[84] = click_add_element_type("VirtualCarrierSenseRbar", beetlemonkey, 84);
  CLICK_DMALLOC_REG("nXXX");
  return 0;
#ifdef CLICK_BSDMODULE
  } else if (t == MOD_UNLOAD) {
#else
}
extern "C" void
cleanup_module()
{
#endif
  click_remove_element_type(hatred_of_rebecca[0]);
  click_remove_element_type(hatred_of_rebecca[1]);
  click_remove_element_type(hatred_of_rebecca[2]);
  click_remove_element_type(hatred_of_rebecca[3]);
  click_remove_element_type(hatred_of_rebecca[4]);
  click_remove_element_type(hatred_of_rebecca[5]);
  click_remove_element_type(hatred_of_rebecca[6]);
  click_remove_element_type(hatred_of_rebecca[7]);
  click_remove_element_type(hatred_of_rebecca[8]);
  click_remove_element_type(hatred_of_rebecca[9]);
  click_remove_element_type(hatred_of_rebecca[10]);
  click_remove_element_type(hatred_of_rebecca[11]);
  click_remove_element_type(hatred_of_rebecca[12]);
  click_remove_element_type(hatred_of_rebecca[13]);
  click_remove_element_type(hatred_of_rebecca[14]);
  click_remove_element_type(hatred_of_rebecca[15]);
  click_remove_element_type(hatred_of_rebecca[16]);
  click_remove_element_type(hatred_of_rebecca[17]);
  click_remove_element_type(hatred_of_rebecca[18]);
  click_remove_element_type(hatred_of_rebecca[19]);
  click_remove_element_type(hatred_of_rebecca[20]);
  click_remove_element_type(hatred_of_rebecca[21]);
  click_remove_element_type(hatred_of_rebecca[22]);
  click_remove_element_type(hatred_of_rebecca[23]);
  click_remove_element_type(hatred_of_rebecca[24]);
  click_remove_element_type(hatred_of_rebecca[25]);
  click_remove_element_type(hatred_of_rebecca[26]);
  click_remove_element_type(hatred_of_rebecca[27]);
  click_remove_element_type(hatred_of_rebecca[28]);
  click_remove_element_type(hatred_of_rebecca[29]);
  click_remove_element_type(hatred_of_rebecca[30]);
  click_remove_element_type(hatred_of_rebecca[31]);
  click_remove_element_type(hatred_of_rebecca[32]);
  click_remove_element_type(hatred_of_rebecca[33]);
  click_remove_element_type(hatred_of_rebecca[34]);
  click_remove_element_type(hatred_of_rebecca[35]);
  click_remove_element_type(hatred_of_rebecca[36]);
  click_remove_element_type(hatred_of_rebecca[37]);
  click_remove_element_type(hatred_of_rebecca[38]);
  click_remove_element_type(hatred_of_rebecca[39]);
  click_remove_element_type(hatred_of_rebecca[40]);
  click_remove_element_type(hatred_of_rebecca[41]);
  click_remove_element_type(hatred_of_rebecca[42]);
  click_remove_element_type(hatred_of_rebecca[43]);
  click_remove_element_type(hatred_of_rebecca[44]);
  click_remove_element_type(hatred_of_rebecca[45]);
  click_remove_element_type(hatred_of_rebecca[46]);
  click_remove_element_type(hatred_of_rebecca[47]);
  click_remove_element_type(hatred_of_rebecca[48]);
  click_remove_element_type(hatred_of_rebecca[49]);
  click_remove_element_type(hatred_of_rebecca[50]);
  click_remove_element_type(hatred_of_rebecca[51]);
  click_remove_element_type(hatred_of_rebecca[52]);
  click_remove_element_type(hatred_of_rebecca[53]);
  click_remove_element_type(hatred_of_rebecca[54]);
  click_remove_element_type(hatred_of_rebecca[55]);
  click_remove_element_type(hatred_of_rebecca[56]);
  click_remove_element_type(hatred_of_rebecca[57]);
  click_remove_element_type(hatred_of_rebecca[58]);
  click_remove_element_type(hatred_of_rebecca[59]);
  click_remove_element_type(hatred_of_rebecca[60]);
  click_remove_element_type(hatred_of_rebecca[61]);
  click_remove_element_type(hatred_of_rebecca[62]);
  click_remove_element_type(hatred_of_rebecca[63]);
  click_remove_element_type(hatred_of_rebecca[64]);
  click_remove_element_type(hatred_of_rebecca[65]);
  click_remove_element_type(hatred_of_rebecca[66]);
  click_remove_element_type(hatred_of_rebecca[67]);
  click_remove_element_type(hatred_of_rebecca[68]);
  click_remove_element_type(hatred_of_rebecca[69]);
  click_remove_element_type(hatred_of_rebecca[70]);
  click_remove_element_type(hatred_of_rebecca[71]);
  click_remove_element_type(hatred_of_rebecca[72]);
  click_remove_element_type(hatred_of_rebecca[73]);
  click_remove_element_type(hatred_of_rebecca[74]);
  click_remove_element_type(hatred_of_rebecca[75]);
  click_remove_element_type(hatred_of_rebecca[76]);
  click_remove_element_type(hatred_of_rebecca[77]);
  click_remove_element_type(hatred_of_rebecca[78]);
  click_remove_element_type(hatred_of_rebecca[79]);
  click_remove_element_type(hatred_of_rebecca[80]);
  click_remove_element_type(hatred_of_rebecca[81]);
  click_remove_element_type(hatred_of_rebecca[82]);
  click_remove_element_type(hatred_of_rebecca[83]);
  click_remove_element_type(hatred_of_rebecca[84]);
  click_unprovide("hydra");
#ifdef CLICK_BSDMODULE
  return 0;
  } else
    return 0;
}
static moduledata_t modinfo = {
  "hydra", modevent, 0
};
DECLARE_MODULE(hydra, modinfo, SI_SUB_PSEUDO, SI_ORDER_ANY);
#else
}
#endif
